---
description: 
globs: 
alwaysApply: true
---
# General Project Rules

This document outlines the general rules and guidelines for working with this project.

## Command Execution Guidelines

### Always Use NPX Commands

All Supabase and CLI commands should be executed using `npx` instead of globally installed tools. This ensures:

- Everyone uses the same CLI version
- No global dependencies to manage
- No conflicts with other Supabase projects
- Easier setup process

**Examples:**
```bash
# ✅ DO THIS:
npx supabase start
npx supabase migration up

# ❌ NOT THIS:
supabase start
supabase migration up
```

### Debugging Commands

When encountering errors, add the `--debug` flag to the command for detailed output:

```bash
# Supabase management commands with debug flag
npx supabase start --debug                   # Start all Supabase services with detailed logging
npx supabase stop --debug                    # Stop all Supabase services with detailed logging
npx supabase status --debug                  # Show status of local Supabase services with detailed info

# Migration commands with debug flag
npx supabase migration up --debug            # Apply pending migrations with detailed logging
npx supabase migration new name --debug      # Create a new migration with verbose output
npx supabase migration list --debug          # List all migrations with detailed status
npx supabase migration repair --debug        # Repair migrations state with detailed logging

# Database commands with debug flag
npx supabase db reset --debug                # Reset database to clean state with detailed logging
npx supabase db push --debug                 # Push schema changes to remote database with detailed logs
npx supabase db pull --debug                 # Pull schema changes from remote database with details
npx supabase db diff --debug                 # Show diff between local and remote database with details
npx supabase db lint --debug                 # Check database for issues with detailed reporting
npx supabase db dump --debug                 # Dump database schema with verbose output

# Gen commands with debug flag
npx supabase gen types typescript --debug    # Generate TypeScript types with detailed output
npx supabase gen enums typescript --debug    # Generate enums with detailed logs

# Function commands with debug flag
npx supabase functions list --debug          # List all edge functions with detailed output
npx supabase functions serve --debug         # Serve functions locally with detailed logging
npx supabase functions deploy --debug        # Deploy functions with detailed deployment logs
```

### Essential Commands

Here are some important commands for working with this project:

1. **Starting Supabase:**
   ```bash
   npx supabase start --debug
   ```

2. **Stopping Supabase:**
   ```bash
   npx supabase stop
   ```
   IMPORTANT: Always run this command before closing the project to properly shut down all Supabase services.

3. **Applying Migrations:**
   ```bash
   npx supabase migration up
   ```

4. **Creating New Migrations:**
   ```bash
   npx supabase migration new [migration_name]
   ```

5. **Resetting Database (Use Cautiously):**
   ```bash
   npx supabase db reset
   ```
   Note: This will erase all data in your local database and reapply migrations.

6. **Checking Supabase Status:**
   ```bash
   npx supabase status
   ```

### Troubleshooting Docker Port Conflicts

If encountering port conflicts:

1. **Stop and remove all Supabase containers:**
   ```bash
   npx supabase stop
   docker rm -f $(docker ps -a -q --filter "name=supabase")
   ```

2. **Check for conflicting processes:**
   ```bash
   # Windows (PowerShell)
   netstat -ano | findstr 5432
   # Then kill the process: 
   taskkill /PID [PID] /F
   ```

3. **Change the project ID** in `supabase/config.toml` to a unique name for each new project to avoid Docker conflicts

## Development Best Practices

1. Always follow the data fetching guidelines in `/doc/data-fetching-guidelines.md`
2. Check for existing functionality in the codebase before implementing new features
3. Update documentation when making significant changes
4. Follow the established patterns for database tables and RLS policies
5. Use the correct environment variables as defined in `.env.local`

## Supabase MCP Tool Usage

### Read-Only Operations

The Supabase MCP tool (local_db tool) is configured for **read-only operations only**. When using this tool:

1. **Do**: Use it for SELECT queries to read data from tables
2. **Do**: Use it to check schema information 
3. **Do**: Use it to verify database structure

4. **Don't**: Attempt to use it for any write operations (INSERT, UPDATE, DELETE)
5. **Don't**: Use it to modify schema (CREATE, ALTER, DROP)
6. **Don't**: Use it for any data manipulation

For any database modifications, always create proper migration files using the Supabase migration commands.


